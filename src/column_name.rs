use std::collections::HashSet;

use rust_extensions::StrOrString;

#[derive(Clone, Debug)]
pub struct ColumnName {
    pub name: StrOrString<'static>,
}

impl ColumnName {
    pub fn new(name: StrOrString<'static>) -> Self {
        Self { name }
    }
    pub fn push_name(&self, dest: &mut String) {
        let has_reserved = is_reserved(self.name.as_str());
        if has_reserved {
            dest.push('"');
        }

        dest.push_str(self.name.as_str());

        if has_reserved {
            dest.push('"');
        }
    }

    pub fn to_string(&self) -> String {
        let mut result = String::new();
        self.push_name(&mut result);
        result
    }
}

impl Into<ColumnName> for &'static str {
    fn into(self) -> ColumnName {
        ColumnName {
            name: StrOrString::create_as_str(self),
        }
    }
}

impl Into<ColumnName> for &'static String {
    fn into(self) -> ColumnName {
        ColumnName {
            name: StrOrString::create_as_str(self),
        }
    }
}

impl Into<ColumnName> for String {
    fn into(self) -> ColumnName {
        ColumnName {
            name: StrOrString::create_as_string(self),
        }
    }
}

pub fn is_reserved(name: &str) -> bool {
    RESERVED.contains(name.to_lowercase().as_str())
}

lazy_static::lazy_static! {
    pub static ref RESERVED: HashSet<&'static str> = {
        let mut result = HashSet::new();

        result.insert("a");

        result.insert("abort");

        result.insert("abs");

        result.insert("absent");

        result.insert("absolute");

        result.insert("access");

        result.insert("according");

        result.insert("acos");

        result.insert("action");

        result.insert("ada");

        result.insert("add");

        result.insert("admin");

        result.insert("after");

        result.insert("aggregate");

        result.insert("all");

        result.insert("allocate");

        result.insert("also");

        result.insert("alter");

        result.insert("always");

        result.insert("analyse");

        result.insert("analyze");
        result.insert("and");
        result.insert("any");
        result.insert("are");
        result.insert("array");
        result.insert("array_agg");
        result.insert("array_​max_​cardinality");
        result.insert("as");
        result.insert("asc");
        result.insert("asensitive");
        result.insert("asin");
        result.insert("assertion");
        result.insert("assignment");
        result.insert("asymmetric");
        result.insert("at");
        result.insert("atan");
        result.insert("atomic");
        result.insert("attach");
        result.insert("attribute");
        result.insert("attributes");
        result.insert("authorization");
        result.insert("avg");
        result.insert("backward");
        result.insert("base64");
        result.insert("before");
        result.insert("begin");
        result.insert("begin_frame");
        result.insert("begin_partition");
        result.insert("bernoulli");
        result.insert("between");
        result.insert("bigint");
        result.insert("binary");
        result.insert("bit");
        result.insert("bit_length");
        result.insert("blob");
        result.insert("blocked");
        result.insert("bom");
        result.insert("boolean");
        result.insert("both");
        result.insert("breadth");
        result.insert("by");
        result.insert("c");
        result.insert("cache");
        result.insert("call");
        result.insert("called");
        result.insert("cardinality");
        result.insert("cascade");
        result.insert("cascaded");
        result.insert("case");
        result.insert("cast");
        result.insert("catalog");
        result.insert("catalog_name");
        result.insert("ceil");
        result.insert("ceiling");
        result.insert("chain");
        result.insert("chaining");
        result.insert("char");
        result.insert("character");
        result.insert("characteristics");
        result.insert("characters");
        result.insert("character_length");
        result.insert("character_​set_​catalog");
        result.insert("character_set_name");
        result.insert("character_set_schema");
        result.insert("char_length");
        result.insert("check");
        result.insert("checkpoint");
        result.insert("class");
        result.insert("classifier");
        result.insert("class_origin");
        result.insert("clob");
        result.insert("close");
        result.insert("cluster");
        result.insert("coalesce");
        result.insert("cobol");
        result.insert("collate");
        result.insert("collation");
        result.insert("collation_catalog");
        result.insert("collation_name");
        result.insert("collation_schema");
        result.insert("collect");
        result.insert("column");
        result.insert("columns");
        result.insert("column_name");
        result.insert("command_function");
        result.insert("command_​function_​code");
        result.insert("COMMENT");
        result.insert("comment");
        result.insert("COMMENTS");
        result.insert("comments");
        result.insert("COMMIT");
        result.insert("commit");
        result.insert("COMMITTED");
        result.insert("committed");
        result.insert("COMPRESSION");
        result.insert("compression");
        result.insert("CONCURRENTLY");
        result.insert("concurrently");
        result.insert("CONDITION");
        result.insert("condition");
        result.insert("CONDITIONAL");
        result.insert("conditional");
        result.insert("CONDITION_NUMBER");
        result.insert("condition_number");
        result.insert("CONFIGURATION");
        result.insert("configuration");
        result.insert("CONFLICT");
        result.insert("conflict");
        result.insert("CONNECT");
        result.insert("connect");
        result.insert("CONNECTION");
        result.insert("connection");
        result.insert("CONNECTION_NAME");
        result.insert("connection_name");
        result.insert("CONSTRAINT");
        result.insert("constraint");
        result.insert("CONSTRAINTS");
        result.insert("constraints");
        result.insert("CONSTRAINT_CATALOG");
        result.insert("constraint_catalog");
        result.insert("CONSTRAINT_NAME");
        result.insert("constraint_name");
        result.insert("CONSTRAINT_SCHEMA");
        result.insert("constraint_schema");
        result.insert("CONSTRUCTOR");
        result.insert("constructor");
        result.insert("CONTAINS");
        result.insert("contains");
        result.insert("CONTENT");
        result.insert("content");
        result.insert("CONTINUE");
        result.insert("continue");
        result.insert("CONTROL");
        result.insert("control");
        result.insert("CONVERSION");
        result.insert("conversion");
        result.insert("CONVERT");
        result.insert("convert");
        result.insert("COPY");
        result.insert("copy");
        result.insert("CORR");
        result.insert("corr");
        result.insert("CORRESPONDING");
        result.insert("corresponding");
        result.insert("COS");
        result.insert("cos");
        result.insert("COSH");
        result.insert("cosh");
        result.insert("COST");
        result.insert("cost");
        result.insert("COUNT");
        result.insert("count");
        result.insert("COVAR_POP");
        result.insert("covar_pop");
        result.insert("COVAR_SAMP");
        result.insert("covar_samp");
        result.insert("CREATE");
        result.insert("create");
        result.insert("CROSS");
        result.insert("cross");
        result.insert("CSV");
        result.insert("csv");
        result.insert("CUBE");
        result.insert("cube");
        result.insert("CUME_DIST");
        result.insert("cume_dist");
        result.insert("CURRENT");
        result.insert("current");
        result.insert("CURRENT_CATALOG");
        result.insert("current_catalog");
        result.insert("CURRENT_DATE");
        result.insert("current_date");
        result.insert("CURRENT_​DEFAULT_​TRANSFORM_​GROUP");
        result.insert("current_​default_​transform_​group");
        result.insert("CURRENT_PATH");
        result.insert("current_path");
        result.insert("CURRENT_ROLE");
        result.insert("current_role");
        result.insert("CURRENT_ROW");
        result.insert("current_row");
        result.insert("CURRENT_SCHEMA");
        result.insert("current_schema");
        result.insert("CURRENT_TIME");
        result.insert("current_time");
        result.insert("CURRENT_TIMESTAMP");
        result.insert("current_timestamp");
        result.insert("CURRENT_​TRANSFORM_​GROUP_​FOR_​TYPE");
        result.insert("current_​transform_​group_​for_​type");
        result.insert("CURRENT_USER");
        result.insert("current_user");
        result.insert("CURSOR");
        result.insert("cursor");
        result.insert("CURSOR_NAME");
        result.insert("cursor_name");
        result.insert("CYCLE");
        result.insert("cycle");
        result.insert("DATA");
        result.insert("data");
        result.insert("DATABASE");
        result.insert("database");
        result.insert("DATALINK");
        result.insert("datalink");
        result.insert("DATE");
        result.insert("date");
        result.insert("DATETIME_​INTERVAL_​CODE");
        result.insert("datetime_​interval_​code");
        result.insert("DATETIME_​INTERVAL_​PRECISION");
        result.insert("datetime_​interval_​precision");
        result.insert("DAY");
        result.insert("day");
        result.insert("DB");
        result.insert("db");
        result.insert("DEALLOCATE");
        result.insert("deallocate");
        result.insert("DEC");
        result.insert("dec");
        result.insert("DECFLOAT");
        result.insert("decfloat");
        result.insert("DECIMAL");
        result.insert("decimal");
        result.insert("DECLARE");
        result.insert("declare");
        result.insert("DEFAULT");
        result.insert("default");
        result.insert("DEFAULTS");
        result.insert("defaults");
        result.insert("DEFERRABLE");
        result.insert("deferrable");
        result.insert("DEFERRED");
        result.insert("deferred");
        result.insert("DEFINE");
        result.insert("define");
        result.insert("DEFINED");
        result.insert("defined");
        result.insert("DEFINER");
        result.insert("definer");
        result.insert("DEGREE");
        result.insert("degree");
        result.insert("DELETE");
        result.insert("delete");
        result.insert("DELIMITER");
        result.insert("delimiter");
        result.insert("DELIMITERS");
        result.insert("delimiters");
        result.insert("DENSE_RANK");
        result.insert("dense_rank");
        result.insert("DEPENDS");
        result.insert("depends");
        result.insert("DEPTH");
        result.insert("depth");
        result.insert("DEREF");
        result.insert("deref");
        result.insert("DERIVED");
        result.insert("derived");
        result.insert("DESC");
        result.insert("desc");
        result.insert("DESCRIBE");
        result.insert("describe");
        result.insert("DESCRIPTOR");
        result.insert("descriptor");
        result.insert("DETACH");
        result.insert("detach");
        result.insert("DETERMINISTIC");
        result.insert("deterministic");
        result.insert("DIAGNOSTICS");
        result.insert("diagnostics");
        result.insert("DICTIONARY");
        result.insert("dictionary");
        result.insert("DISABLE");
        result.insert("disable");
        result.insert("DISCARD");
        result.insert("discard");
        result.insert("DISCONNECT");
        result.insert("disconnect");
        result.insert("DISPATCH");
        result.insert("dispatch");
        result.insert("DISTINCT");
        result.insert("distinct");
        result.insert("DLNEWCOPY");
        result.insert("dlnewcopy");
        result.insert("DLPREVIOUSCOPY");
        result.insert("dlpreviouscopy");
        result.insert("DLURLCOMPLETE");
        result.insert("dlurlcomplete");
        result.insert("DLURLCOMPLETEONLY");
        result.insert("dlurlcompleteonly");
        result.insert("DLURLCOMPLETEWRITE");
        result.insert("dlurlcompletewrite");
        result.insert("DLURLPATH");
        result.insert("dlurlpath");
        result.insert("DLURLPATHONLY");
        result.insert("dlurlpathonly");
        result.insert("DLURLPATHWRITE");
        result.insert("dlurlpathwrite");
        result.insert("DLURLSCHEME");
        result.insert("dlurlscheme");
        result.insert("DLURLSERVER");
        result.insert("dlurlserver");
        result.insert("DLVALUE");
        result.insert("dlvalue");
        result.insert("DO");
        result.insert("do");
        result.insert("DOCUMENT");
        result.insert("document");
        result.insert("DOMAIN");
        result.insert("domain");
        result.insert("DOUBLE");
        result.insert("double");
        result.insert("DROP");
        result.insert("drop");
        result.insert("DYNAMIC");
        result.insert("dynamic");
        result.insert("DYNAMIC_FUNCTION");
        result.insert("dynamic_function");
        result.insert("DYNAMIC_​FUNCTION_​CODE");
        result.insert("dynamic_​function_​code");
        result.insert("EACH");
        result.insert("each");
        result.insert("ELEMENT");
        result.insert("element");
        result.insert("ELSE");
        result.insert("else");
        result.insert("EMPTY");
        result.insert("empty");
        result.insert("ENABLE");
        result.insert("enable");
        result.insert("ENCODING");
        result.insert("encoding");
        result.insert("ENCRYPTED");
        result.insert("encrypted");
        result.insert("END");
        result.insert("end");
        result.insert("END-EXEC");
        result.insert("end-exec");
        result.insert("END_FRAME");
        result.insert("end_frame");
        result.insert("END_PARTITION");
        result.insert("end_partition");
        result.insert("ENFORCED");
        result.insert("enforced");
        result.insert("ENUM");
        result.insert("enum");
        result.insert("EQUALS");
        result.insert("equals");
        result.insert("ERROR");
        result.insert("error");
        result.insert("ESCAPE");
        result.insert("escape");
        result.insert("EVENT");
        result.insert("event");
        result.insert("EVERY");
        result.insert("every");
        result.insert("EXCEPT");
        result.insert("except");
        result.insert("EXCEPTION");
        result.insert("exception");
        result.insert("EXCLUDE");
        result.insert("exclude");
        result.insert("EXCLUDING");
        result.insert("excluding");
        result.insert("EXCLUSIVE");
        result.insert("exclusive");
        result.insert("EXEC");
        result.insert("exec");
        result.insert("EXECUTE");
        result.insert("execute");
        result.insert("EXISTS");
        result.insert("exists");
        result.insert("EXP");
        result.insert("exp");
        result.insert("EXPLAIN");
        result.insert("explain");
        result.insert("EXPRESSION");
        result.insert("expression");
        result.insert("EXTENSION");
        result.insert("extension");
        result.insert("EXTERNAL");
        result.insert("external");
        result.insert("EXTRACT");
        result.insert("extract");
        result.insert("ЛОЖЬ");
        result.insert("ложь");
        result.insert("FAMILY");
        result.insert("family");
        result.insert("FETCH");
        result.insert("fetch");
        result.insert("FILE");
        result.insert("file");
        result.insert("FILTER");
        result.insert("filter");
        result.insert("FINAL");
        result.insert("final");
        result.insert("FINALIZE");
        result.insert("finalize");
        result.insert("FINISH");
        result.insert("finish");
        result.insert("FIRST");
        result.insert("first");
        result.insert("FIRST_VALUE");
        result.insert("first_value");
        result.insert("FLAG");
        result.insert("flag");
        result.insert("FLOAT");
        result.insert("float");
        result.insert("FLOOR");
        result.insert("floor");
        result.insert("FOLLOWING");
        result.insert("following");
        result.insert("FOR");
        result.insert("for");
        result.insert("FORCE");
        result.insert("force");
        result.insert("FOREIGN");
        result.insert("foreign");
        result.insert("FORMAT");
        result.insert("format");
        result.insert("FORTRAN");
        result.insert("fortran");
        result.insert("FORWARD");
        result.insert("forward");
        result.insert("FOUND");
        result.insert("found");
        result.insert("FRAME_ROW");
        result.insert("frame_row");
        result.insert("FREE");
        result.insert("free");
        result.insert("FREEZE");
        result.insert("freeze");
        result.insert("FROM");
        result.insert("from");
        result.insert("FS");
        result.insert("fs");
        result.insert("FULFILL");
        result.insert("fulfill");
        result.insert("FULL");
        result.insert("full");
        result.insert("FUNCTION");
        result.insert("function");
        result.insert("FUNCTIONS");
        result.insert("functions");
        result.insert("FUSION");
        result.insert("fusion");
        result.insert("G");
        result.insert("g");
        result.insert("GENERAL");
        result.insert("general");
        result.insert("GENERATED");
        result.insert("generated");
        result.insert("GET");
        result.insert("get");
        result.insert("GLOBAL");
        result.insert("global");
        result.insert("GO");
        result.insert("go");
        result.insert("GOTO");
        result.insert("goto");
        result.insert("GRANT");
        result.insert("grant");
        result.insert("GRANTED");
        result.insert("granted");
        result.insert("GREATEST");
        result.insert("greatest");
        result.insert("GROUP");
        result.insert("group");
        result.insert("GROUPING");
        result.insert("grouping");
        result.insert("GROUPS");
        result.insert("groups");
        result.insert("HANDLER");
        result.insert("handler");
        result.insert("HAVING");
        result.insert("having");
        result.insert("HEADER");
        result.insert("header");
        result.insert("HEX");
        result.insert("hex");
        result.insert("HIERARCHY");
        result.insert("hierarchy");
        result.insert("HOLD");
        result.insert("hold");
        result.insert("HOUR");
        result.insert("hour");
        result.insert("ID");
        result.insert("id");
        result.insert("IDENTITY");
        result.insert("identity");
        result.insert("IF");
        result.insert("if");
        result.insert("IGNORE");
        result.insert("ignore");
        result.insert("ILIKE");
        result.insert("ilike");
        result.insert("IMMEDIATE");
        result.insert("immediate");
        result.insert("IMMEDIATELY");
        result.insert("immediately");
        result.insert("IMMUTABLE");
        result.insert("immutable");
        result.insert("IMPLEMENTATION");
        result.insert("implementation");
        result.insert("IMPLICIT");
        result.insert("implicit");
        result.insert("IMPORT");
        result.insert("import");
        result.insert("IN");
        result.insert("in");
        result.insert("INCLUDE");
        result.insert("include");
        result.insert("INCLUDING");
        result.insert("including");
        result.insert("INCREMENT");
        result.insert("increment");
        result.insert("INDENT");
        result.insert("indent");
        result.insert("INDEX");
        result.insert("index");
        result.insert("INDEXES");
        result.insert("indexes");
        result.insert("INDICATOR");
        result.insert("indicator");
        result.insert("INHERIT");
        result.insert("inherit");
        result.insert("INHERITS");
        result.insert("inherits");
        result.insert("INITIAL");
        result.insert("initial");
        result.insert("INITIALLY");
        result.insert("initially");
        result.insert("INLINE");
        result.insert("inline");
        result.insert("INNER");
        result.insert("inner");
        result.insert("INOUT");
        result.insert("inout");
        result.insert("INPUT");
        result.insert("input");
        result.insert("INSENSITIVE");
        result.insert("insensitive");
        result.insert("INSERT");
        result.insert("insert");
        result.insert("INSTANCE");
        result.insert("instance");
        result.insert("INSTANTIABLE");
        result.insert("instantiable");
        result.insert("INSTEAD");
        result.insert("instead");
        result.insert("INT");
        result.insert("int");
        result.insert("INTEGER");
        result.insert("integer");
        result.insert("INTEGRITY");
        result.insert("integrity");
        result.insert("INTERSECT");
        result.insert("intersect");
        result.insert("INTERSECTION");
        result.insert("intersection");
        result.insert("INTERVAL");
        result.insert("interval");
        result.insert("INTO");
        result.insert("into");
        result.insert("INVOKER");
        result.insert("invoker");
        result.insert("IS");
        result.insert("is");
        result.insert("ISNULL");
        result.insert("isnull");
        result.insert("ISOLATION");
        result.insert("isolation");
        result.insert("JOIN");
        result.insert("join");
        result.insert("JSON_ARRAY");
        result.insert("json_array");
        result.insert("JSON_ARRAYAGG");
        result.insert("json_arrayagg");
        result.insert("JSON_EXISTS");
        result.insert("json_exists");
        result.insert("JSON_OBJECT");
        result.insert("json_object");
        result.insert("JSON_OBJECTAGG");
        result.insert("json_objectagg");
        result.insert("JSON_QUERY");
        result.insert("json_query");
        result.insert("JSON_TABLE");
        result.insert("json_table");
        result.insert("JSON_TABLE_PRIMITIVE");
        result.insert("json_table_primitive");
        result.insert("JSON_VALUE");
        result.insert("json_value");
        result.insert("K");
        result.insert("k");
        result.insert("KEEP");
        result.insert("keep");
        result.insert("KEY");
        result.insert("key");
        result.insert("KEYS");
        result.insert("keys");
        result.insert("KEY_MEMBER");
        result.insert("key_member");
        result.insert("KEY_TYPE");
        result.insert("key_type");
        result.insert("LABEL");
        result.insert("label");
        result.insert("LAG");
        result.insert("lag");
        result.insert("LANGUAGE");
        result.insert("language");
        result.insert("LARGE");
        result.insert("large");
        result.insert("LAST");
        result.insert("last");
        result.insert("LAST_VALUE");
        result.insert("last_value");
        result.insert("LATERAL");
        result.insert("lateral");
        result.insert("LEAD");
        result.insert("lead");
        result.insert("LEADING");
        result.insert("leading");
        result.insert("LEAKPROOF");
        result.insert("leakproof");
        result.insert("LEAST");
        result.insert("least");
        result.insert("LEFT");
        result.insert("left");
        result.insert("LENGTH");
        result.insert("length");
        result.insert("LEVEL");
        result.insert("level");
        result.insert("LIBRARY");
        result.insert("library");
        result.insert("LIKE");
        result.insert("like");
        result.insert("LIKE_REGEX");
        result.insert("like_regex");
        result.insert("LIMIT");
        result.insert("limit");
        result.insert("LINK");
        result.insert("link");
        result.insert("LISTAGG");
        result.insert("listagg");
        result.insert("LISTEN");
        result.insert("listen");
        result.insert("LN");
        result.insert("ln");
        result.insert("LOAD");
        result.insert("load");
        result.insert("LOCAL");
        result.insert("local");
        result.insert("LOCALTIME");
        result.insert("localtime");
        result.insert("LOCALTIMESTAMP");
        result.insert("localtimestamp");
        result.insert("LOCATION");
        result.insert("location");
        result.insert("LOCATOR");
        result.insert("locator");
        result.insert("LOCK");
        result.insert("lock");
        result.insert("LOCKED");
        result.insert("locked");
        result.insert("LOG");
        result.insert("log");
        result.insert("LOG10");
        result.insert("log10");
        result.insert("LOGGED");
        result.insert("logged");
        result.insert("LOWER");
        result.insert("lower");
        result.insert("M");
        result.insert("m");
        result.insert("MAP");
        result.insert("map");
        result.insert("MAPPING");
        result.insert("mapping");
        result.insert("MATCH");
        result.insert("match");
        result.insert("MATCHED");
        result.insert("matched");
        result.insert("MATCHES");
        result.insert("matches");
        result.insert("MATCH_NUMBER");
        result.insert("match_number");
        result.insert("MATCH_RECOGNIZE");
        result.insert("match_recognize");
        result.insert("MATERIALIZED");
        result.insert("materialized");
        result.insert("MAX");
        result.insert("max");
        result.insert("MAXVALUE");
        result.insert("maxvalue");
        result.insert("MEASURES");
        result.insert("measures");
        result.insert("MEMBER");
        result.insert("member");
        result.insert("MERGE");
        result.insert("merge");
        result.insert("MESSAGE_LENGTH");
        result.insert("message_length");
        result.insert("MESSAGE_OCTET_LENGTH");
        result.insert("message_octet_length");
        result.insert("MESSAGE_TEXT");
        result.insert("message_text");
        result.insert("METHOD");
        result.insert("method");
        result.insert("MIN");
        result.insert("min");
        result.insert("MINUTE");
        result.insert("minute");
        result.insert("MINVALUE");
        result.insert("minvalue");
        result.insert("MOD");
        result.insert("mod");
        result.insert("MODE");
        result.insert("mode");
        result.insert("MODIFIES");
        result.insert("modifies");
        result.insert("MODULE");
        result.insert("module");
        result.insert("MONTH");
        result.insert("month");
        result.insert("MORE");
        result.insert("more");
        result.insert("MOVE");
        result.insert("move");
        result.insert("MULTISET");
        result.insert("multiset");
        result.insert("MUMPS");
        result.insert("mumps");
        result.insert("NAME");
        result.insert("name");
        result.insert("NAMES");
        result.insert("names");
        result.insert("NAMESPACE");
        result.insert("namespace");
        result.insert("NATIONAL");
        result.insert("national");
        result.insert("NATURAL");
        result.insert("natural");
        result.insert("NCHAR");
        result.insert("nchar");
        result.insert("NCLOB");
        result.insert("nclob");
        result.insert("NESTED");
        result.insert("nested");
        result.insert("NESTING");
        result.insert("nesting");
        result.insert("NEW");
        result.insert("new");
        result.insert("NEXT");
        result.insert("next");
        result.insert("NFC");
        result.insert("nfc");
        result.insert("NFD");
        result.insert("nfd");
        result.insert("NFKC");
        result.insert("nfkc");
        result.insert("NFKD");
        result.insert("nfkd");
        result.insert("NIL");
        result.insert("nil");
        result.insert("NO");
        result.insert("no");
        result.insert("NONE");
        result.insert("none");
        result.insert("NORMALIZE");
        result.insert("normalize");
        result.insert("NORMALIZED");
        result.insert("normalized");
        result.insert("NOT");
        result.insert("not");
        result.insert("NOTHING");
        result.insert("nothing");
        result.insert("NOTIFY");
        result.insert("notify");
        result.insert("NOTNULL");
        result.insert("notnull");
        result.insert("NOWAIT");
        result.insert("nowait");
        result.insert("NTH_VALUE");
        result.insert("nth_value");
        result.insert("NTILE");
        result.insert("ntile");
        result.insert("NULL");
        result.insert("null");
        result.insert("NULLABLE");
        result.insert("nullable");
        result.insert("NULLIF");
        result.insert("nullif");
        result.insert("NULLS");
        result.insert("nulls");
        result.insert("NULL_ORDERING");
        result.insert("null_ordering");
        result.insert("NUMBER");
        result.insert("number");
        result.insert("NUMERIC");
        result.insert("numeric");
        result.insert("OBJECT");
        result.insert("object");
        result.insert("OCCURRENCE");
        result.insert("occurrence");
        result.insert("OCCURRENCES_REGEX");
        result.insert("occurrences_regex");
        result.insert("OCTETS");
        result.insert("octets");
        result.insert("OCTET_LENGTH");
        result.insert("octet_length");
        result.insert("OF");
        result.insert("of");
        result.insert("OFF");
        result.insert("off");
        result.insert("OFFSET");
        result.insert("offset");
        result.insert("OIDS");
        result.insert("oids");
        result.insert("OLD");
        result.insert("old");
        result.insert("OMIT");
        result.insert("omit");
        result.insert("ON");
        result.insert("on");
        result.insert("ONE");
        result.insert("one");
        result.insert("ONLY");
        result.insert("only");
        result.insert("OPEN");
        result.insert("open");
        result.insert("OPERATOR");
        result.insert("operator");
        result.insert("OPTION");
        result.insert("option");
        result.insert("OPTIONS");
        result.insert("options");
        result.insert("OR");
        result.insert("or");
        result.insert("ORDER");
        result.insert("order");
        result.insert("ORDERING");
        result.insert("ordering");
        result.insert("ORDINALITY");
        result.insert("ordinality");
        result.insert("OTHERS");
        result.insert("others");
        result.insert("OUT");
        result.insert("out");
        result.insert("OUTER");
        result.insert("outer");
        result.insert("OUTPUT");
        result.insert("output");
        result.insert("OVER");
        result.insert("over");
        result.insert("OVERFLOW");
        result.insert("overflow");
        result.insert("OVERLAPS");
        result.insert("overlaps");
        result.insert("OVERLAY");
        result.insert("overlay");
        result.insert("OVERRIDING");
        result.insert("overriding");
        result.insert("OWNED");
        result.insert("owned");
        result.insert("OWNER");
        result.insert("owner");
        result.insert("P");
        result.insert("p");
        result.insert("PAD");
        result.insert("pad");
        result.insert("PARALLEL");
        result.insert("parallel");
        result.insert("PARAMETER");
        result.insert("parameter");
        result.insert("PARAMETER_MODE");
        result.insert("parameter_mode");
        result.insert("PARAMETER_NAME");
        result.insert("parameter_name");
        result.insert("PARAMETER_​ORDINAL_​POSITION");
        result.insert("parameter_​ordinal_​position");
        result.insert("PARAMETER_​SPECIFIC_​CATALOG");
        result.insert("parameter_​specific_​catalog");
        result.insert("PARAMETER_​SPECIFIC_​NAME");
        result.insert("parameter_​specific_​name");
        result.insert("PARAMETER_​SPECIFIC_​SCHEMA");
        result.insert("parameter_​specific_​schema");
        result.insert("PARSER");
        result.insert("parser");
        result.insert("PARTIAL");
        result.insert("partial");
        result.insert("PARTITION");
        result.insert("partition");
        result.insert("PASCAL");
        result.insert("pascal");
        result.insert("PASS");
        result.insert("pass");
        result.insert("PASSING");
        result.insert("passing");
        result.insert("PASSTHROUGH");
        result.insert("passthrough");
        result.insert("PASSWORD");
        result.insert("password");
        result.insert("PAST");
        result.insert("past");
        result.insert("PATH");
        result.insert("path");
        result.insert("PATTERN");
        result.insert("pattern");
        result.insert("PER");
        result.insert("per");
        result.insert("PERCENT");
        result.insert("percent");
        result.insert("PERCENTILE_CONT");
        result.insert("percentile_cont");
        result.insert("percentile_disc");
        result.insert("percent_rank");
        result.insert("period");
        result.insert("permission");
        result.insert("permute");
        result.insert("pipe");
        result.insert("placing");
        result.insert("plan");
        result.insert("plans");
        result.insert("pli");
        result.insert("policy");
        result.insert("portion");
        result.insert("position");
        result.insert("position_regex");
        result.insert("power");
        result.insert("precedes");
        result.insert("preceding");
        result.insert("precision");
        result.insert("prepare");
        result.insert("prepared");
        result.insert("preserve");
        result.insert("prev");
        result.insert("primary");
        result.insert("prior");
        result.insert("private");
        result.insert("privileges");
        result.insert("procedural");
        result.insert("procedure");
        result.insert("procedures");
        result.insert("program");
        result.insert("prune");
        result.insert("ptf");
        result.insert("public");
        result.insert("publication");
        result.insert("quote");
        result.insert("quotes");
        result.insert("range");
        result.insert("rank");
        result.insert("read");
        result.insert("reads");
        result.insert("real");
        result.insert("reassign");
        result.insert("recheck");
        result.insert("recovery");
        result.insert("recursive");
        result.insert("ref");
        result.insert("references");
        result.insert("referencing");
        result.insert("refresh");
        result.insert("regr_avgx");
        result.insert("regr_avgy");
        result.insert("regr_count");
        result.insert("regr_intercept");
        result.insert("regr_r2");
        result.insert("regr_slope");
        result.insert("regr_sxx");
        result.insert("regr_sxy");
        result.insert("regr_syy");
        result.insert("reindex");
        result.insert("relative");
        result.insert("release");
        result.insert("rename");
        result.insert("repeatable");
        result.insert("replace");
        result.insert("replica");
        result.insert("requiring");
        result.insert("reset");
        result.insert("respect");
        result.insert("restart");
        result.insert("restore");
        result.insert("restrict");
        result.insert("result");
        result.insert("return");
        result.insert("returned_cardinality");
        result.insert("returned_length");
        result.insert("returned_​octet_​length");

        result.insert("returned_sqlstate");
        result.insert("RETURNING");
        result.insert("returning");
        result.insert("RETURNS");
        result.insert("returns");
        result.insert("REVOKE");
        result.insert("revoke");
        result.insert("RIGHT");
        result.insert("right");
        result.insert("ROLE");
        result.insert("role");
        result.insert("ROLLBACK");
        result.insert("rollback");
        result.insert("ROLLUP");
        result.insert("rollup");
        result.insert("ROUTINE");
        result.insert("routine");
        result.insert("ROUTINES");
        result.insert("routines");
        result.insert("ROUTINE_CATALOG");
        result.insert("routine_catalog");
        result.insert("ROUTINE_NAME");
        result.insert("routine_name");
        result.insert("ROUTINE_SCHEMA");
        result.insert("routine_schema");
        result.insert("ROW");
        result.insert("row");
        result.insert("ROWS");
        result.insert("rows");
        result.insert("ROW_COUNT");
        result.insert("row_count");
        result.insert("ROW_NUMBER");
        result.insert("row_number");
        result.insert("RULE");
        result.insert("rule");
        result.insert("RUNNING");
        result.insert("running");
        result.insert("SAVEPOINT");
        result.insert("savepoint");
        result.insert("SCALAR");
        result.insert("scalar");
        result.insert("SCALE");
        result.insert("scale");
        result.insert("SCHEMA");
        result.insert("schema");
        result.insert("SCHEMAS");
        result.insert("schemas");
        result.insert("SCHEMA_NAME");
        result.insert("schema_name");
        result.insert("SCOPE");
        result.insert("scope");
        result.insert("SCOPE_CATALOG");
        result.insert("scope_catalog");
        result.insert("SCOPE_NAME");
        result.insert("scope_name");
        result.insert("SCOPE_SCHEMA");
        result.insert("scope_schema");
        result.insert("SCROLL");
        result.insert("scroll");
        result.insert("SEARCH");
        result.insert("search");
        result.insert("SECOND");
        result.insert("second");
        result.insert("SECTION");
        result.insert("section");
        result.insert("SECURITY");
        result.insert("security");
        result.insert("SEEK");
        result.insert("seek");
        result.insert("SELECT");
        result.insert("select");
        result.insert("SELECTIVE");
        result.insert("selective");
        result.insert("SELF");
        result.insert("self");
        result.insert("SEMANTICS");
        result.insert("semantics");
        result.insert("SENSITIVE");
        result.insert("sensitive");
        result.insert("SEQUENCE");
        result.insert("sequence");
        result.insert("SEQUENCES");
        result.insert("sequences");
        result.insert("SERIALIZABLE");
        result.insert("serializable");
        result.insert("SERVER");
        result.insert("server");
        result.insert("SERVER_NAME");
        result.insert("server_name");
        result.insert("SESSION");
        result.insert("session");
        result.insert("SESSION_USER");
        result.insert("session_user");
        result.insert("SET");
        result.insert("set");
        result.insert("SETOF");
        result.insert("setof");
        result.insert("SETS");
        result.insert("sets");
        result.insert("SHARE");
        result.insert("share");
        result.insert("SHOW");
        result.insert("show");
        result.insert("SIMILAR");
        result.insert("similar");
        result.insert("SIMPLE");
        result.insert("simple");
        result.insert("SIN");
        result.insert("sin");
        result.insert("SINH");
        result.insert("sinh");
        result.insert("SIZE");
        result.insert("size");
        result.insert("SKIP");
        result.insert("skip");
        result.insert("SMALLINT");
        result.insert("smallint");
        result.insert("SNAPSHOT");
        result.insert("snapshot");
        result.insert("SOME");
        result.insert("some");
        result.insert("SORT_DIRECTION");
        result.insert("sort_direction");
        result.insert("SOURCE");
        result.insert("source");
        result.insert("SPACE");
        result.insert("space");
        result.insert("SPECIFIC");
        result.insert("specific");
        result.insert("SPECIFICTYPE");
        result.insert("specifictype");
        result.insert("SPECIFIC_NAME");
        result.insert("specific_name");
        result.insert("SQL");
        result.insert("sql");
        result.insert("SQLCODE");
        result.insert("sqlcode");
        result.insert("SQLERROR");
        result.insert("sqlerror");
        result.insert("SQLEXCEPTION");
        result.insert("sqlexception");
        result.insert("SQLSTATE");
        result.insert("sqlstate");
        result.insert("SQLWARNING");
        result.insert("sqlwarning");
        result.insert("SQRT");
        result.insert("sqrt");
        result.insert("STABLE");
        result.insert("stable");
        result.insert("STANDALONE");
        result.insert("standalone");
        result.insert("START");
        result.insert("start");
        result.insert("STATE");
        result.insert("state");
        result.insert("STATEMENT");
        result.insert("statement");
        result.insert("STATIC");
        result.insert("static");
        result.insert("STATISTICS");
        result.insert("statistics");
        result.insert("STDDEV_POP");
        result.insert("stddev_pop");
        result.insert("STDDEV_SAMP");
        result.insert("stddev_samp");
        result.insert("STDIN");
        result.insert("stdin");
        result.insert("STDOUT");
        result.insert("stdout");
        result.insert("STORAGE");
        result.insert("storage");
        result.insert("STORED");
        result.insert("stored");
        result.insert("STRICT");
        result.insert("strict");
        result.insert("STRING");
        result.insert("string");
        result.insert("STRIP");
        result.insert("strip");
        result.insert("STRUCTURE");
        result.insert("structure");
        result.insert("STYLE");
        result.insert("style");
        result.insert("SUBCLASS_ORIGIN");
        result.insert("subclass_origin");
        result.insert("SUBMULTISET");
        result.insert("submultiset");
        result.insert("SUBSCRIPTION");
        result.insert("subscription");
        result.insert("SUBSET");
        result.insert("subset");
        result.insert("SUBSTRING");
        result.insert("substring");
        result.insert("SUBSTRING_REGEX");
        result.insert("substring_regex");
        result.insert("SUCCEEDS");
        result.insert("succeeds");
        result.insert("SUM");
        result.insert("sum");
        result.insert("SUPPORT");
        result.insert("support");
        result.insert("SYMMETRIC");
        result.insert("symmetric");
        result.insert("SYSID");
        result.insert("sysid");
        result.insert("SYSTEM");
        result.insert("system");
        result.insert("SYSTEM_TIME");
        result.insert("system_time");
        result.insert("SYSTEM_USER");
        result.insert("system_user");
        result.insert("T");
        result.insert("t");
        result.insert("TABLE");
        result.insert("table");
        result.insert("TABLES");
        result.insert("tables");
        result.insert("TABLESAMPLE");
        result.insert("tablesample");
        result.insert("TABLESPACE");
        result.insert("tablespace");
        result.insert("TABLE_NAME");
        result.insert("table_name");
        result.insert("TAN");
        result.insert("tan");
        result.insert("TANH");
        result.insert("tanh");
        result.insert("TEMP");
        result.insert("temp");
        result.insert("TEMPLATE");
        result.insert("template");
        result.insert("TEMPORARY");
        result.insert("temporary");
        result.insert("TEXT");
        result.insert("text");
        result.insert("THEN");
        result.insert("then");
        result.insert("THROUGH");
        result.insert("through");
        result.insert("TIES");
        result.insert("ties");
        result.insert("TIME");
        result.insert("time");
        result.insert("TIMESTAMP");
        result.insert("timestamp");
        result.insert("TIMEZONE_HOUR");
        result.insert("timezone_hour");
        result.insert("TIMEZONE_MINUTE");
        result.insert("timezone_minute");
        result.insert("TO");
        result.insert("to");
        result.insert("TOKEN");
        result.insert("token");
        result.insert("TOP_LEVEL_COUNT");
        result.insert("top_level_count");
        result.insert("TRAILING");
        result.insert("trailing");
        result.insert("TRANSACTION");
        result.insert("transaction");
        result.insert("TRANSACTIONS_​COMMITTED");
        result.insert("transactions_​committed");
        result.insert("TRANSACTIONS_​ROLLED_​BACK");
        result.insert("transactions_​rolled_​back");
        result.insert("TRANSACTION_ACTIVE");
        result.insert("transaction_active");
        result.insert("TRANSFORM");
        result.insert("transform");
        result.insert("TRANSFORMS");
        result.insert("transforms");
        result.insert("TRANSLATE");
        result.insert("translate");
        result.insert("TRANSLATE_REGEX");
        result.insert("translate_regex");
        result.insert("TRANSLATION");
        result.insert("translation");
        result.insert("TREAT");
        result.insert("treat");
        result.insert("TRIGGER");
        result.insert("trigger");
        result.insert("TRIGGER_CATALOG");
        result.insert("trigger_catalog");
        result.insert("TRIGGER_NAME");
        result.insert("trigger_name");
        result.insert("TRIGGER_SCHEMA");
        result.insert("trigger_schema");
        result.insert("TRIM");
        result.insert("trim");
        result.insert("TRIM_ARRAY");
        result.insert("trim_array");
        result.insert("ИСТИНА");
        result.insert("истина");
        result.insert("TRUNCATE");
        result.insert("truncate");
        result.insert("TRUSTED");
        result.insert("trusted");
        result.insert("TYPE");
        result.insert("type");
        result.insert("TYPES");
        result.insert("types");
        result.insert("UESCAPE");
        result.insert("uescape");
        result.insert("UNBOUNDED");
        result.insert("unbounded");
        result.insert("UNCOMMITTED");
        result.insert("uncommitted");
        result.insert("UNCONDITIONAL");
        result.insert("unconditional");
        result.insert("UNDER");
        result.insert("under");
        result.insert("UNENCRYPTED");
        result.insert("unencrypted");
        result.insert("UNION");
        result.insert("union");
        result.insert("UNIQUE");
        result.insert("unique");
        result.insert("UNKNOWN");
        result.insert("unknown");
        result.insert("UNLINK");
        result.insert("unlink");
        result.insert("UNLISTEN");
        result.insert("unlisten");
        result.insert("UNLOGGED");
        result.insert("unlogged");
        result.insert("UNMATCHED");
        result.insert("unmatched");
        result.insert("UNNAMED");
        result.insert("unnamed");
        result.insert("UNNEST");
        result.insert("unnest");
        result.insert("UNTIL");
        result.insert("until");
        result.insert("UNTYPED");
        result.insert("untyped");
        result.insert("UPDATE");
        result.insert("update");
        result.insert("UPPER");
        result.insert("upper");
        result.insert("URI");
        result.insert("uri");
        result.insert("USAGE");
        result.insert("usage");
        result.insert("USER");
        result.insert("user");
        result.insert("USER_​DEFINED_​TYPE_​CATALOG");
        result.insert("user_​defined_​type_​catalog");
        result.insert("USER_​DEFINED_​TYPE_​CODE");
        result.insert("user_​defined_​type_​code");
        result.insert("USER_​DEFINED_​TYPE_​NAME");
        result.insert("user_​defined_​type_​name");
        result.insert("USER_​DEFINED_​TYPE_​SCHEMA");
        result.insert("user_​defined_​type_​schema");
        result.insert("USING");
        result.insert("using");
        result.insert("UTF16");
        result.insert("utf16");
        result.insert("UTF32");
        result.insert("utf32");
        result.insert("UTF8");
        result.insert("utf8");
        result.insert("VACUUM");
        result.insert("vacuum");
        result.insert("VALID");
        result.insert("valid");
        result.insert("VALIDATE");
        result.insert("validate");
        result.insert("VALIDATOR");
        result.insert("validator");
        result.insert("VALUE");
        result.insert("value");
        result.insert("VALUES");
        result.insert("values");
        result.insert("VALUE_OF");
        result.insert("value_of");
        result.insert("VARBINARY");
        result.insert("varbinary");
        result.insert("VARCHAR");
        result.insert("varchar");
        result.insert("VARIADIC");
        result.insert("variadic");
        result.insert("VARYING");
        result.insert("varying");
        result.insert("VAR_POP");
        result.insert("var_pop");
        result.insert("VAR_SAMP");
        result.insert("var_samp");
        result.insert("VERBOSE");
        result.insert("verbose");
        result.insert("VERSION");
        result.insert("version");
        result.insert("VERSIONING");
        result.insert("versioning");
        result.insert("VIEW");
        result.insert("view");
        result.insert("VIEWS");
        result.insert("views");
        result.insert("VOLATILE");
        result.insert("volatile");
        result.insert("WHEN");
        result.insert("when");
        result.insert("WHENEVER");
        result.insert("whenever");
        result.insert("WHERE");
        result.insert("where");
        result.insert("WHITESPACE");
        result.insert("whitespace");
        result.insert("WIDTH_BUCKET");
        result.insert("width_bucket");
        result.insert("WINDOW");
        result.insert("window");
        result.insert("WITH");
        result.insert("with");
        result.insert("WITHIN");
        result.insert("within");
        result.insert("WITHOUT");
        result.insert("without");
        result.insert("WORK");
        result.insert("work");
        result.insert("WRAPPER");
        result.insert("wrapper");
        result.insert("WRITE");
        result.insert("write");
        result.insert("XML");
        result.insert("xml");
        result.insert("XMLAGG");
        result.insert("xmlagg");
        result.insert("XMLATTRIBUTES");
        result.insert("xmlattributes");
        result.insert("XMLBINARY");
        result.insert("xmlbinary");
        result.insert("XMLCAST");
        result.insert("xmlcast");
        result.insert("XMLCOMMENT");
        result.insert("xmlcomment");
        result.insert("XMLCONCAT");
        result.insert("xmlconcat");
        result.insert("XMLDECLARATION");
        result.insert("xmldeclaration");
        result.insert("XMLDOCUMENT");
        result.insert("xmldocument");
        result.insert("XMLELEMENT");
        result.insert("xmlelement");
        result.insert("XMLEXISTS");
        result.insert("xmlexists");
        result.insert("XMLFOREST");
        result.insert("xmlforest");
        result.insert("XMLITERATE");
        result.insert("xmliterate");
        result.insert("XMLNAMESPACES");
        result.insert("xmlnamespaces");
        result.insert("XMLPARSE");
        result.insert("xmlparse");
        result.insert("XMLPI");
        result.insert("xmlpi");
        result.insert("XMLQUERY");
        result.insert("xmlquery");
        result.insert("XMLROOT");
        result.insert("xmlroot");
        result.insert("XMLSCHEMA");
        result.insert("xmlschema");
        result.insert("XMLSERIALIZE");
        result.insert("xmlserialize");
        result.insert("XMLTABLE");
        result.insert("xmltable");
        result.insert("XMLTEXT");
        result.insert("xmltext");
        result.insert("XMLVALIDATE");
        result.insert("xmlvalidate");
        result.insert("YEAR");
        result.insert("year");
        result.insert("YES");
        result.insert("yes");
        result.insert("zone");

        result
    };
}
